// 如果hooks.js文件放在项目目录下，那么这里仅需要导出这个文件路径字符串即可
// 当HOOKS_FILE这个导出值存在时，本文件内定义的其他编程接口将无效。以HOOKS_FILE指定的hooks.js内容为准
exports.HOOKS_FILE='path/to/hooks.js'

// 若有本地代理，建议手动设置代理地址，因为直接读取系统代理目前可能读取错误
exports.proxy=false /* {
  src: 'http://127.0.0.1:8080'
} */

// 网络请求超时，默认10秒
exports.NETWORK_TIMEOUT=10e3

// 根据当前请求的url和响应，选择性的修改响应结果
exports.url2response=({
   url, method, postData, requestHeaders,

   go302,
   sleep,
   requestPipe,

   waitForResponse,
   addResponseHeader,
   getResponseHeader,
   deleteResponseHeader,
   setResponseType,
   getResponse,
   getStatusCode,
   setStatusCode,
})=>{
  await waitForResponse()
  console.log({url, getResponse()})
  if(!url.match(/^https\:\/\/www.baidu.com\/$/)) return
  return `<h1>blocked by chrome-dev-tool</h1>`
}

// 是否需要缓存这个请求的结果
// return true 缓存写入默认文件名，return 文件名写入指定文件，return false不写入缓存
exports.url2cachefile=({url})=>{
  if(url.match(/jsonp/)) return true
}

// 在 location.href 改变之后被调用（包括historyAPI，hashChange），运行于node上下文
exports.runScriptOnUrlChange=async ({
  url,
  page,
  $, mouse, keyboard,
  sleep, evaluate,
})=>{
  const {focus, click, hover}=mouse
  const {ctrlBackspace, type, enter}=keyboard
  console.log(url)
}

